"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
jest.mock('@redocly/openapi-core', () => ({
    pause: jest.requireActual('@redocly/openapi-core').pause,
}));
describe('retryUntilConditionMet()', () => {
    it('should retry until condition meet and return result', () => __awaiter(void 0, void 0, void 0, function* () {
        const operation = jest
            .fn()
            .mockResolvedValueOnce({ status: 'pending' })
            .mockResolvedValueOnce({ status: 'pending' })
            .mockResolvedValueOnce({ status: 'done' });
        const data = yield (0, utils_1.retryUntilConditionMet)({
            operation,
            condition: (result) => (result === null || result === void 0 ? void 0 : result.status) === 'done',
            retryIntervalMs: 100,
            retryTimeoutMs: 1000,
        });
        expect(data).toEqual({ status: 'done' });
    }));
    it('should throw error if condition not meet for desired timeout', () => __awaiter(void 0, void 0, void 0, function* () {
        const operation = jest.fn().mockResolvedValue({ status: 'pending' });
        yield expect((0, utils_1.retryUntilConditionMet)({
            operation,
            condition: (result) => (result === null || result === void 0 ? void 0 : result.status) === 'done',
            retryIntervalMs: 100,
            retryTimeoutMs: 1000,
        })).rejects.toThrow('Timeout exceeded');
    }));
    it('should call "onConditionNotMet" and "onRetry" callbacks', () => __awaiter(void 0, void 0, void 0, function* () {
        const operation = jest
            .fn()
            .mockResolvedValueOnce({ status: 'pending' })
            .mockResolvedValueOnce({ status: 'pending' })
            .mockResolvedValueOnce({ status: 'done' });
        const onConditionNotMet = jest.fn();
        const onRetry = jest.fn();
        const data = yield (0, utils_1.retryUntilConditionMet)({
            operation,
            condition: (result) => (result === null || result === void 0 ? void 0 : result.status) === 'done',
            retryIntervalMs: 100,
            retryTimeoutMs: 1000,
            onConditionNotMet,
            onRetry,
        });
        expect(data).toEqual({ status: 'done' });
        expect(onConditionNotMet).toHaveBeenCalledTimes(2);
        expect(onRetry).toHaveBeenCalledTimes(2);
    }));
});

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const abort_controller_1 = require("abort-controller");
const fetch_with_timeout_1 = require("../utils/fetch-with-timeout");
const node_fetch_1 = require("node-fetch");
jest.mock('node-fetch');
describe('fetchWithTimeout', () => {
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should call node-fetch with signal', () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-ignore
        global.setTimeout = jest.fn();
        global.clearTimeout = jest.fn();
        yield (0, fetch_with_timeout_1.default)('url');
        expect(global.setTimeout).toHaveBeenCalledTimes(1);
        expect(node_fetch_1.default).toHaveBeenCalledWith('url', { signal: new abort_controller_1.default().signal });
        expect(global.clearTimeout).toHaveBeenCalledTimes(1);
    }));
});

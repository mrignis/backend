"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const openapi_core_1 = require("@redocly/openapi-core");
const bundle_1 = require("../../commands/bundle");
const miscellaneous_1 = require("../../utils/miscellaneous");
const wrapper_1 = require("../../wrapper");
jest.mock('@redocly/openapi-core');
jest.mock('../../utils/miscellaneous');
openapi_core_1.getMergedConfig.mockImplementation((config) => config);
describe('bundle', () => {
    let processExitMock;
    let exitCb;
    beforeEach(() => {
        processExitMock = jest.spyOn(process, 'exit').mockImplementation();
        jest.spyOn(process, 'once').mockImplementation((_e, cb) => {
            exitCb = cb;
            return process.on(_e, cb);
        });
        jest.spyOn(process.stderr, 'write').mockImplementation(() => true);
    });
    afterEach(() => {
        openapi_core_1.bundle.mockClear();
        openapi_core_1.getTotals.mockReset();
    });
    it('bundles definitions', () => __awaiter(void 0, void 0, void 0, function* () {
        const apis = ['foo.yaml', 'bar.yaml'];
        yield (0, wrapper_1.commandWrapper)(bundle_1.handleBundle)({
            apis,
            ext: 'yaml',
        });
        expect(openapi_core_1.bundle).toBeCalledTimes(apis.length);
    }));
    it('exits with code 0 when bundles definitions', () => __awaiter(void 0, void 0, void 0, function* () {
        const apis = ['foo.yaml', 'bar.yaml', 'foobar.yaml'];
        yield (0, wrapper_1.commandWrapper)(bundle_1.handleBundle)({
            apis,
            ext: 'yaml',
        });
        yield (exitCb === null || exitCb === void 0 ? void 0 : exitCb());
        expect(processExitMock).toHaveBeenCalledWith(0);
    }));
    it('exits with code 0 when bundles definitions w/o errors', () => __awaiter(void 0, void 0, void 0, function* () {
        const apis = ['foo.yaml', 'bar.yaml', 'foobar.yaml'];
        yield (0, wrapper_1.commandWrapper)(bundle_1.handleBundle)({
            apis,
            ext: 'yaml',
        });
        yield (exitCb === null || exitCb === void 0 ? void 0 : exitCb());
        expect(processExitMock).toHaveBeenCalledWith(0);
    }));
    it('exits with code 1 when bundles definitions w/errors', () => __awaiter(void 0, void 0, void 0, function* () {
        const apis = ['foo.yaml'];
        openapi_core_1.getTotals.mockReturnValue({
            errors: 1,
            warnings: 0,
            ignored: 0,
        });
        yield (0, wrapper_1.commandWrapper)(bundle_1.handleBundle)({
            apis,
            ext: 'yaml',
        });
        yield (exitCb === null || exitCb === void 0 ? void 0 : exitCb());
        expect(processExitMock).toHaveBeenCalledWith(1);
    }));
    it('handleError is called when bundles an invalid definition', () => __awaiter(void 0, void 0, void 0, function* () {
        const apis = ['invalid.json'];
        openapi_core_1.bundle.mockImplementationOnce(() => {
            throw new Error('Invalid definition');
        });
        yield (0, wrapper_1.commandWrapper)(bundle_1.handleBundle)({
            apis,
            ext: 'json',
        });
        expect(miscellaneous_1.handleError).toHaveBeenCalledTimes(1);
        expect(miscellaneous_1.handleError).toHaveBeenCalledWith(new Error('Invalid definition'), 'invalid.json');
    }));
    it("handleError isn't called when bundles a valid definition", () => __awaiter(void 0, void 0, void 0, function* () {
        const apis = ['foo.yaml'];
        openapi_core_1.getTotals.mockReturnValue({
            errors: 0,
            warnings: 0,
            ignored: 0,
        });
        yield (0, wrapper_1.commandWrapper)(bundle_1.handleBundle)({
            apis,
            ext: 'yaml',
        });
        expect(miscellaneous_1.handleError).toHaveBeenCalledTimes(0);
    }));
});

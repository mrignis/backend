"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.previewProject = void 0;
const path = require("path");
const fs_1 = require("fs");
const child_process_1 = require("child_process");
const constants_1 = require("./constants");
const previewProject = (args) => __awaiter(void 0, void 0, void 0, function* () {
    const { plan, port } = args;
    const projectDir = args['source-dir'];
    const product = args.product || tryGetProductFromPackageJson(projectDir);
    if (!isValidProduct(product)) {
        process.stderr.write(`Invalid product ${product}`);
        throw new Error(`Project preview launch failed`);
    }
    const productName = constants_1.PRODUCT_NAMES[product];
    const packageName = constants_1.PRODUCT_PACKAGES[product];
    process.stdout.write(`\nLaunching preview of ${productName} ${plan} using NPX\n\n`);
    const npxExecutableName = process.platform === 'win32' ? 'npx.cmd' : 'npx';
    (0, child_process_1.spawn)(npxExecutableName, ['-y', packageName, 'develop', `--plan=${plan}`, `--port=${port || 4000}`], {
        stdio: 'inherit',
        cwd: projectDir,
    });
});
exports.previewProject = previewProject;
const isValidProduct = (product) => {
    if (!product) {
        return false;
    }
    return !!constants_1.PRODUCT_NAMES[product];
};
const tryGetProductFromPackageJson = (projectDir) => {
    const packageJsonPath = path.join(process.cwd(), projectDir, 'package.json');
    if ((0, fs_1.existsSync)(packageJsonPath)) {
        try {
            const packageJson = JSON.parse((0, fs_1.readFileSync)(packageJsonPath, 'utf-8'));
            const packageJsonDeps = packageJson.dependencies || {};
            for (const [product, packageName] of Object.entries(constants_1.PRODUCT_PACKAGES)) {
                if (packageJsonDeps[packageName]) {
                    process.stdout.write(`\n${packageName} detected in project's 'package.json'`);
                    return product;
                }
            }
        }
        catch (error) {
            process.stdout.write(`Invalid 'package.json': ${packageJsonPath}. Using Realm.`);
        }
    }
    return 'realm';
};
